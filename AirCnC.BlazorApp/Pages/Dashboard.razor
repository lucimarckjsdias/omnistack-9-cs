@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@page "/dashboard"

    <ul class="notifications">
        @foreach (var booking in Bookings)
        {
            <li @key="booking.Guid">
                <p>
                    <strong>@booking.User.Email</strong> solicitou uma reserva em <strong>@booking.Spot.Company</strong> para o dia <strong>@booking.Date.ToShortDateString()</strong>.
                </p>
                <button class="accept" @onclick="async () => { await HandleRequest(booking, true); }">ACEITAR</button>
                <button class="reject" @onclick="async () => { await HandleRequest(booking, false); }">RECUSAR</button>
            </li>
        }
    </ul>
<ul class="spot-list">
    @if (Spots != null)
    {
        foreach (var spot in Spots)
        {
            <li @key="spot.Guid">
                <header style="background-image: url(@($"\"https://localhost:5001{spot.Thumbnail}\"")" />
                <strong>@(spot.Company)</strong>
                <span>@(spot.Price > 0 ? $"R$ {spot.Price}" : "GRATUITO")</span>
            </li>
        }
    }
</ul>

<NavLink href="/new">
    <button class="btn">Cadastrar novo spot</button>
</NavLink>

@code {
    private string UserGuid { get; set; }
    private HubConnection Connection { get; set; }
    private List<Spot> Spots { get; set; }
    private List<Booking> Bookings { get; set; } = new List<Booking>();

    protected override async Task OnInitializedAsync()
    {
        UserGuid = await LocalStorage.GetItemAsync<string>("user");

        using (var client = new HttpClient())
        {
            client.BaseAddress = new Uri("https://localhost:5001/api");
            client.DefaultRequestHeaders.Add("userGuid", UserGuid);

            var response = await client.GetAsync("/dashboard");
            Spots = JsonConvert.DeserializeObject<List<Spot>>(await response.Content.ReadAsStringAsync());
        }

        Connection = new HubConnectionBuilder()
            .WithUrl($"https://localhost:5001/bookings?user={UserGuid}")
            .WithAutomaticReconnect()
            .Build();

        Connection.On<string, string>("ReceiveBooking", HandleConnection);

        await Connection.StartAsync();
    }

    private Task HandleConnection(string to, string message)
    {
        Console.WriteLine($"Recebido: {message}");

        if (JsonConvert.DeserializeObject<Booking>(message) is Booking booking)
        {
            Bookings.Add(booking);
            Console.WriteLine(JsonConvert.SerializeObject(Bookings));
            StateHasChanged();
        }

        return Task.CompletedTask;
    }

    private async Task HandleRequest(Booking booking, bool isApproved)
    {
        booking.IsApproved = isApproved;
        await Connection.InvokeAsync("SendBooking", booking.User.Guid.ToString(), JsonConvert.SerializeObject(booking));
    }
}